<!--
  Copyright [2023] [Coordinated Chaos]
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Dev Docs</title>
    </head>
    <body>
        <h1>Dev Docs</h1>
        <h2>How to run</h2>
        <div>
            <p>System Requirements</p>
            <ul>
                <li>
                    <a href="https://www.docker.com/products/docker-desktop/"
                        >Docker</a
                    >
                </li>
            </ul>
            <p>
                First of all create a local MongoDB instance, this can be done
                in docker with the following command:
            </p>
            <code
                >docker run --name MongoDB -p 27017:27017 -d mongo:latest</code
            >
            <p>
                Then rename the <code>.env.template</code> file to
                <code>.env</code> the example values will allow the application
                if you have set up your database as shown above, however the
                file upload will not work without a valid Azure connection
                string.
            </p>
            <p>
                Once you have done this, the project includes build scripts for
                Windows (<code>build.bat</code>) and Linux
                (<code>build.sh</code>). Running this file will build the docker
                image, remove any existing containers, ensure the database is
                running and then run the new image.The app will then be
                available on port 3000 (<a href="http://localhost:3000"
                    >http://localhost:3000</a
                >).
            </p>
            <p>
                This works without needing to install NodeJS or the project
                dependencies as the docker image uses the Node image and
                installs the dependencies within it.
            </p>
        </div>
        <h2>How to test</h2>
        <div>
            <p>System Requirements</p>
            <ul>
                <li>
                    <a href="https://nodejs.org/en">NodeJS v20</a>
                </li>
            </ul>
            <p>
                To install the dependencies needed to run the application and
                test it outside of docker, run <code>npm install</code>
            </p>
            <p>
                Then you can run <code>npm test</code> to run the unit tests.
                You will see the results in the terminal.
            </p>
        </div>
        <h2>How to deploy</h2>
        <div>
            <p>
                The deployment happens automatically when code is merged into
                the main branch.
            </p>
            <p>The GitHub CI/CD deployment pipeline runs as follows:</p>
            <ol>
                <li>The code is checked out</li>
                <li>It logs into our private Azure container registry</li>
                <li>It builds the docker image</li>
                <li>It pushes the docker image to the container registry</li>
                <li>
                    It SSH's onto the deployment server as the "deploy" user
                </li>
                <li>It runs the update script</li>
            </ol>
            <p>
                On the server in the "deploy" users directory are 2 files, the
                <code>compose.yml</code> file and the
                <code>update.sh</code> file.
            </p>
            <p>
                The update file just runs
                <code>docker compose pull && docker compose up -d</code> to pull
                the new image and start the containers with the new image.
            </p>
        </div>
        <h2>Feature Implementation</h2>
        <h3>1. Secured with SSL</h3>
        <div></div>
        <h3>2. ReST API Documentation (OpenAPI)</h3>
        <div></div>
        <h3>3. Database</h3>
        <div>
            <p>
                For the database, we chose to use MongoDB as it is a NoSQL
                database it is very flexible making it easy to add new features
                when they require new fields in the data.
            </p>
            <p>
                The database is hosted within docker, in our local testing
                environments we have the port open so that it can easily be
                accessed from a GUI like
                <a href="https://studio3t.com/">Studio 3t</a>. This helps with
                debugging.
            </p>
            <p>
                On the live deployment, it does not have its ports open, it is
                accessed by the app through a private network within Docker.
                (See the <a href="#compose-image">compose file</a> for more
                details)
            </p>
            <p>
                To interact with the database in NodeJS we are using the
                <a href="https://www.npmjs.com/package/mongoose">mongoose</a>
                npm package which is a wrapper for the official NodeJS MongoDB
                driver, making it easy to declare schemas and work with the data
                in the collections.
            </p>
        </div>
        <h3>4. Internationalisation</h3>
        <div></div>
        <h3>5. Documentation</h3>
        <div>THIS IS THE DOCUMENTATION</div>
        <h3>6. GDPR</h3>
        <div></div>
        <h3>7. Server hosting and Docker</h3>
        <div>
            <h4>Azure Server</h4>
            <h4>Docker</h4>
            <img id="compose-image" src="/docs/compose.png" alt="compose.yml" />
            <figcaption>compose.yml</figcaption>
        </div>
        <h3>8. User authentication</h3>
        <div></div>
        <h3>9. User privalleges</h3>
        <div></div>
        <h3>10. Mobile access</h3>
        <div></div>
        <h3>11. Responsiveness</h3>
        <div></div>
        <h3>12. Geolocation</h3>
        <div></div>
        <h3>13. Client authentication</h3>
        <div></div>
    </body>
</html>
